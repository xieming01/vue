const express = require('express');
const path = require('path');
const fs = require('fs');
const favicon = require('serve-favicon');
const app = express();
const routes = require('../routes/index.js');
const port = process.env.PORT || 8080;
const serialize = require('serialize-javascript')
const env = process.env.NODE_ENV || 'development';
app.set('env', env);


app.use(favicon(path.join(__dirname, '../public', 'favicon.ico')));
//proxy
const proxyObj = require('../config/proxy.js');
const proxyMiddleware = require('http-proxy-middleware');
Object.keys(proxyObj).forEach(function(context) {
    const options = proxyObj[context];
    app.use(proxyMiddleware(context, options));
})

function createRenderer(bundle) {
    return require('vue-server-renderer').createBundleRenderer(bundle)
}

function parseIndex(template) {
    const contentMarker = '<!-- APP -->'
    const arr = template.split(contentMarker)
    return {
        head: arr[0],
        body: arr[1],
        tail: arr[2]
    }
}

let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (env === 'development') {
    require('../config/setup-dev-server.js')(app, {
        bundleUpdated: bundle => {
            renderer = createRenderer(bundle)
        },
        indexUpdated: index => {
            indexHTML = parseIndex(index)
        }
    })
} else if (env === 'production') {
    renderer = createRenderer(fs.readFileSync(path.join(__dirname, '../dist/server-bundle.js'), 'utf-8'))
    indexHTML = parseIndex(fs.readFileSync(path.join(__dirname, '../dist/index.html'), 'utf-8'))
}

app.use('/lib',express.static(path.join(__dirname, '../dist/lib')));
app.use(express.static(path.join(__dirname, '../public')));

app.use((req, res, next) => {
    if (req.originalUrl !== '/' && req.originalUrl !== '/list') {
        next()
        return
    }
    if (!renderer) {
        return res.end('waiting for compilation... refresh in a moment.')
    }
    res.setHeader("Content-Type", "text/html");
    const context = { url: req.originalUrl }
    renderer.renderToString(context, (err, html) => {
        if (err) {
            console.log(err)
            res.status(500).end('Internal Error 500')
        }

        res.end(`${indexHTML.head}${html}<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, {isJSON: true})}</script>${indexHTML.tail}`)
    })
})

app.use(routes);
app.use((req, res, next) => {
    if (env === 'production') {
        res.sendFile(path.join(__dirname, '../dist', 'index.html'));
    } else {
        res.send(indexHTML.head + indexHTML.body + indexHTML.tail)
    }
})


app.listen(port, (err) => {
    console.log(`server started at localhost:${port}`)
})